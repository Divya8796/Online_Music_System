#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Musicdb")]
	public partial class MusicdbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPlaylist(Playlist instance);
    partial void UpdatePlaylist(Playlist instance);
    partial void DeletePlaylist(Playlist instance);
    partial void InsertSong(Song instance);
    partial void UpdateSong(Song instance);
    partial void DeleteSong(Song instance);
    partial void InsertSong_to_Playlist(Song_to_Playlist instance);
    partial void UpdateSong_to_Playlist(Song_to_Playlist instance);
    partial void DeleteSong_to_Playlist(Song_to_Playlist instance);
    partial void InsertFavorite(Favorite instance);
    partial void UpdateFavorite(Favorite instance);
    partial void DeleteFavorite(Favorite instance);
    #endregion
		
		public MusicdbDataContext() : 
				base(global::Database.Properties.Settings.Default.MusicdbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MusicdbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicdbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicdbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MusicdbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Playlist> Playlists
		{
			get
			{
				return this.GetTable<Playlist>();
			}
		}
		
		public System.Data.Linq.Table<Song> Songs
		{
			get
			{
				return this.GetTable<Song>();
			}
		}
		
		public System.Data.Linq.Table<Song_to_Playlist> Song_to_Playlists
		{
			get
			{
				return this.GetTable<Song_to_Playlist>();
			}
		}
		
		public System.Data.Linq.Table<Favorite> Favorites
		{
			get
			{
				return this.GetTable<Favorite>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private string _Name;
		
		private string _Email;
		
		private string _Password;
		
		private string _Security_Question;
		
		private string _Security_Ans;
		
		private System.Data.Linq.Binary _Image;
		
		private EntitySet<Playlist> _Playlists;
		
		private EntitySet<Favorite> _Favorites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSecurity_QuestionChanging(string value);
    partial void OnSecurity_QuestionChanged();
    partial void OnSecurity_AnsChanging(string value);
    partial void OnSecurity_AnsChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    #endregion
		
		public User()
		{
			this._Playlists = new EntitySet<Playlist>(new Action<Playlist>(this.attach_Playlists), new Action<Playlist>(this.detach_Playlists));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Question", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Question
		{
			get
			{
				return this._Security_Question;
			}
			set
			{
				if ((this._Security_Question != value))
				{
					this.OnSecurity_QuestionChanging(value);
					this.SendPropertyChanging();
					this._Security_Question = value;
					this.SendPropertyChanged("Security_Question");
					this.OnSecurity_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Security_Ans", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Security_Ans
		{
			get
			{
				return this._Security_Ans;
			}
			set
			{
				if ((this._Security_Ans != value))
				{
					this.OnSecurity_AnsChanging(value);
					this.SendPropertyChanging();
					this._Security_Ans = value;
					this.SendPropertyChanged("Security_Ans");
					this.OnSecurity_AnsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Playlist", Storage="_Playlists", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Playlist> Playlists
		{
			get
			{
				return this._Playlists;
			}
			set
			{
				this._Playlists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_Favorites", ThisKey="Username", OtherKey="Username")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Playlists(Playlist entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Playlists(Playlist entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Playlist")]
	public partial class Playlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Playlist_Id;
		
		private string _Username;
		
		private int _Song_Count;
		
		private int _Like_Count;
		
		private string _Playlistname;
		
		private EntitySet<Song_to_Playlist> _Song_to_Playlists;
		
		private EntitySet<Favorite> _Favorites;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnSong_CountChanging(int value);
    partial void OnSong_CountChanged();
    partial void OnLike_CountChanging(int value);
    partial void OnLike_CountChanged();
    partial void OnPlaylistnameChanging(string value);
    partial void OnPlaylistnameChanged();
    #endregion
		
		public Playlist()
		{
			this._Song_to_Playlists = new EntitySet<Song_to_Playlist>(new Action<Song_to_Playlist>(this.attach_Song_to_Playlists), new Action<Song_to_Playlist>(this.detach_Song_to_Playlists));
			this._Favorites = new EntitySet<Favorite>(new Action<Favorite>(this.attach_Favorites), new Action<Favorite>(this.detach_Favorites));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Count", DbType="Int NOT NULL")]
		public int Song_Count
		{
			get
			{
				return this._Song_Count;
			}
			set
			{
				if ((this._Song_Count != value))
				{
					this.OnSong_CountChanging(value);
					this.SendPropertyChanging();
					this._Song_Count = value;
					this.SendPropertyChanged("Song_Count");
					this.OnSong_CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Like_Count", DbType="Int NOT NULL")]
		public int Like_Count
		{
			get
			{
				return this._Like_Count;
			}
			set
			{
				if ((this._Like_Count != value))
				{
					this.OnLike_CountChanging(value);
					this.SendPropertyChanging();
					this._Like_Count = value;
					this.SendPropertyChanged("Like_Count");
					this.OnLike_CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlistname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Playlistname
		{
			get
			{
				return this._Playlistname;
			}
			set
			{
				if ((this._Playlistname != value))
				{
					this.OnPlaylistnameChanging(value);
					this.SendPropertyChanging();
					this._Playlistname = value;
					this.SendPropertyChanged("Playlistname");
					this.OnPlaylistnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Song_to_Playlist", Storage="_Song_to_Playlists", ThisKey="Playlist_Id", OtherKey="Playlist_Id")]
		public EntitySet<Song_to_Playlist> Song_to_Playlists
		{
			get
			{
				return this._Song_to_Playlists;
			}
			set
			{
				this._Song_to_Playlists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Favorite", Storage="_Favorites", ThisKey="Playlist_Id", OtherKey="Playlist_Id")]
		public EntitySet<Favorite> Favorites
		{
			get
			{
				return this._Favorites;
			}
			set
			{
				this._Favorites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Playlist", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Playlists.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Playlists.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Song_to_Playlists(Song_to_Playlist entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = this;
		}
		
		private void detach_Song_to_Playlists(Song_to_Playlist entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = null;
		}
		
		private void attach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = this;
		}
		
		private void detach_Favorites(Favorite entity)
		{
			this.SendPropertyChanging();
			entity.Playlist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song")]
	public partial class Song : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Song_Id;
		
		private string _Songname;
		
		private System.Data.Linq.Binary _File;
		
		private string _Tag;
		
		private EntitySet<Song_to_Playlist> _Song_to_Playlists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSong_IdChanging(System.Guid value);
    partial void OnSong_IdChanged();
    partial void OnSongnameChanging(string value);
    partial void OnSongnameChanged();
    partial void OnFileChanging(System.Data.Linq.Binary value);
    partial void OnFileChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    #endregion
		
		public Song()
		{
			this._Song_to_Playlists = new EntitySet<Song_to_Playlist>(new Action<Song_to_Playlist>(this.attach_Song_to_Playlists), new Action<Song_to_Playlist>(this.detach_Song_to_Playlists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Song_Id
		{
			get
			{
				return this._Song_Id;
			}
			set
			{
				if ((this._Song_Id != value))
				{
					this.OnSong_IdChanging(value);
					this.SendPropertyChanging();
					this._Song_Id = value;
					this.SendPropertyChanged("Song_Id");
					this.OnSong_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Songname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Songname
		{
			get
			{
				return this._Songname;
			}
			set
			{
				if ((this._Songname != value))
				{
					this.OnSongnameChanging(value);
					this.SendPropertyChanging();
					this._Songname = value;
					this.SendPropertyChanged("Songname");
					this.OnSongnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[File]", Storage="_File", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary File
		{
			get
			{
				return this._File;
			}
			set
			{
				if ((this._File != value))
				{
					this.OnFileChanging(value);
					this.SendPropertyChanging();
					this._File = value;
					this.SendPropertyChanged("File");
					this.OnFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tag", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Tag
		{
			get
			{
				return this._Tag;
			}
			set
			{
				if ((this._Tag != value))
				{
					this.OnTagChanging(value);
					this.SendPropertyChanging();
					this._Tag = value;
					this.SendPropertyChanged("Tag");
					this.OnTagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Song_to_Playlist", Storage="_Song_to_Playlists", ThisKey="Song_Id", OtherKey="Song_Id")]
		public EntitySet<Song_to_Playlist> Song_to_Playlists
		{
			get
			{
				return this._Song_to_Playlists;
			}
			set
			{
				this._Song_to_Playlists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Song_to_Playlists(Song_to_Playlist entity)
		{
			this.SendPropertyChanging();
			entity.Song = this;
		}
		
		private void detach_Song_to_Playlists(Song_to_Playlist entity)
		{
			this.SendPropertyChanging();
			entity.Song = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Song_to_Playlist")]
	public partial class Song_to_Playlist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Song_Id;
		
		private int _Playlist_Id;
		
		private EntityRef<Playlist> _Playlist;
		
		private EntityRef<Song> _Song;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSong_IdChanging(System.Guid value);
    partial void OnSong_IdChanged();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    #endregion
		
		public Song_to_Playlist()
		{
			this._Playlist = default(EntityRef<Playlist>);
			this._Song = default(EntityRef<Song>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Song_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Song_Id
		{
			get
			{
				return this._Song_Id;
			}
			set
			{
				if ((this._Song_Id != value))
				{
					if (this._Song.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSong_IdChanging(value);
					this.SendPropertyChanging();
					this._Song_Id = value;
					this.SendPropertyChanged("Song_Id");
					this.OnSong_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL")]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					if (this._Playlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Song_to_Playlist", Storage="_Playlist", ThisKey="Playlist_Id", OtherKey="Playlist_Id", IsForeignKey=true)]
		public Playlist Playlist
		{
			get
			{
				return this._Playlist.Entity;
			}
			set
			{
				Playlist previousValue = this._Playlist.Entity;
				if (((previousValue != value) 
							|| (this._Playlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Playlist.Entity = null;
						previousValue.Song_to_Playlists.Remove(this);
					}
					this._Playlist.Entity = value;
					if ((value != null))
					{
						value.Song_to_Playlists.Add(this);
						this._Playlist_Id = value.Playlist_Id;
					}
					else
					{
						this._Playlist_Id = default(int);
					}
					this.SendPropertyChanged("Playlist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Song_Song_to_Playlist", Storage="_Song", ThisKey="Song_Id", OtherKey="Song_Id", IsForeignKey=true)]
		public Song Song
		{
			get
			{
				return this._Song.Entity;
			}
			set
			{
				Song previousValue = this._Song.Entity;
				if (((previousValue != value) 
							|| (this._Song.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Song.Entity = null;
						previousValue.Song_to_Playlists.Remove(this);
					}
					this._Song.Entity = value;
					if ((value != null))
					{
						value.Song_to_Playlists.Add(this);
						this._Song_Id = value.Song_Id;
					}
					else
					{
						this._Song_Id = default(System.Guid);
					}
					this.SendPropertyChanged("Song");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favorite")]
	public partial class Favorite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Username;
		
		private int _Playlist_Id;
		
		private EntityRef<User> _User;
		
		private EntityRef<Playlist> _Playlist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPlaylist_IdChanging(int value);
    partial void OnPlaylist_IdChanged();
    #endregion
		
		public Favorite()
		{
			this._User = default(EntityRef<User>);
			this._Playlist = default(EntityRef<Playlist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Playlist_Id", DbType="Int NOT NULL")]
		public int Playlist_Id
		{
			get
			{
				return this._Playlist_Id;
			}
			set
			{
				if ((this._Playlist_Id != value))
				{
					if (this._Playlist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaylist_IdChanging(value);
					this.SendPropertyChanging();
					this._Playlist_Id = value;
					this.SendPropertyChanged("Playlist_Id");
					this.OnPlaylist_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Favorite", Storage="_User", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Playlist_Favorite", Storage="_Playlist", ThisKey="Playlist_Id", OtherKey="Playlist_Id", IsForeignKey=true)]
		public Playlist Playlist
		{
			get
			{
				return this._Playlist.Entity;
			}
			set
			{
				Playlist previousValue = this._Playlist.Entity;
				if (((previousValue != value) 
							|| (this._Playlist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Playlist.Entity = null;
						previousValue.Favorites.Remove(this);
					}
					this._Playlist.Entity = value;
					if ((value != null))
					{
						value.Favorites.Add(this);
						this._Playlist_Id = value.Playlist_Id;
					}
					else
					{
						this._Playlist_Id = default(int);
					}
					this.SendPropertyChanged("Playlist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
